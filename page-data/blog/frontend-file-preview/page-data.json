{"componentChunkName":"component---src-templates-blog-detail-js","path":"/blog/frontend-file-preview","result":{"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/blog/frontend-file-preview\",\n  \"title\": \"前端实现文件预览\",\n  \"date\": \"2022-06-20 20:53:21\",\n  \"brief\": \"在项目中经常用到文件在线预览的功能，文件格式以pdf、docx、excel为主，在此进行简单的组件封装，便于复用。\",\n  \"tag\": \"react\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"\\u9884\\u89C8pdf\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/wojtekmaj/react-pdf\"\n  }, \"react-pdf \\u5B98\\u65B9\\u6587\\u6863\"), \" \")), mdx(\"h4\", null, \"\\u5B89\\u88C5\\u4F9D\\u8D56\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"npm i -S react-pdf\\n\")), mdx(\"h4\", null, \"\\u5F00\\u59CB\\u4F7F\\u7528\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u5B98\\u65B9\\u7ED9\\u7684\\u793A\\u4F8B\\u4EE3\\u7801\\u642C\\u8FC7\\u6765\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u624B\\u52A8\\u914D\\u7F6EPDF.js worker\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u53EF\\u4EE5\\u901A\\u8FC7CDN\\u4F7F\\u7528\\u538B\\u7F29\\u8FC7\\u540E\\u7684\\u6587\\u4EF6\\uFF0C\\u4E5F\\u53EF\\u4EE5\\u76F4\\u63A5\\u5F15\\u5165\\uFF08\\u6587\\u4EF6\\u672C\\u8EAB\\u538B\\u7F29\\u4EE5\\u540E\\u8FD8\\u67091M\\u5DE6\\u53F3\\uFF09\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u8FD9\\u4E2A\\u6587\\u4EF6\\u5728\\u672C\\u5730\\u5B89\\u88C5\\u7684\\u6A21\\u5757\\u4E0B\\uFF1A \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"pdfjs-dist/build/pdf.worker.min.js\"), \" \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"pdfjs.GlobalWorkerOptions.workerSrc = '';\\n\")))), mdx(\"h4\", null, \"\\u5B8C\\u6574\\u793A\\u4F8B\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\u5305\\u542B\\u7FFB\\u9875\\u548C\\u7F29\\u653E\\u529F\\u80FD\\u7684\\u7B80\\u5355\\u793A\\u4F8B\\u3002\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useState } from 'react';\\nimport type { FC } from 'react';\\nimport { InputNumber, Spin, Tooltip } from 'antd';\\nimport { LeftOutlined, RightOutlined, ZoomInOutlined, ZoomOutOutlined } from '@ant-design/icons';\\nimport { Document, Page, pdfjs } from 'react-pdf';\\nimport config from '@config';\\n\\nconst { base } = config;\\n\\n// \\u624B\\u52A8\\u914D\\u7F6EPDF.js worker\\npdfjs.GlobalWorkerOptions.workerSrc = `${base}/pdf/pdf.worker.min.js`;\\n\\ntype PDFViewerProps = {\\n  file?: string | File;\\n  containerStyle?: React.CSSProperties;\\n};\\n\\nconst PDFViewer: FC<PDFViewerProps> = (props) => {\\n  const { file, containerStyle } = props;\\n  const [numPages, setNumPages] = useState<number>(0);\\n  const [pageNumber, setPageNumber] = useState<number>(1);\\n  const [pageNoInput, setPageNoInput] = useState<number>(1);\\n  const [zoomPercent, setZoomPercent] = useState<number>(100);\\n\\n  const onDocumentLoadSuccess = ({ numPages }: any) => {\\n    setNumPages(numPages);\\n  };\\n\\n  // \\u4E0A\\u4E00\\u9875 & \\u4E0B\\u4E00\\u9875\\n  const onPageStep = (step: number) => {\\n    if ((step === -1 && pageNumber === 1) || (step === 1 && pageNumber === numPages)) return;\\n    setPageNumber(pageNumber + step);\\n  };\\n\\n  // \\u9875\\u9762\\u8DF3\\u8F6C\\n  const onPageNoInputChange = (v: number) => {\\n    setPageNoInput(v);\\n  };\\n\\n  const jumpToPage = (e: any) => {\\n    let v = e.target.value;\\n    v = Math.min(v, numPages);\\n    v = Math.max(v, 1);\\n    setPageNoInput(v);\\n    setPageNumber(v);\\n  }\\n\\n  const onPageZoomIn = () => {\\n    if (zoomPercent >= 200) return;\\n    setZoomPercent(zoomPercent + 20);\\n  };\\n\\n  const onPageZoomOut = () => {\\n    if (zoomPercent <= 100) return;\\n    setZoomPercent(zoomPercent - 20);\\n  };\\n\\n  return (\\n    <div className={styles.viewer} style={{ ...containerStyle }}>\\n      <div className={styles.pageContainer}>\\n        <Document\\n          file={file}\\n          onLoadSuccess={onDocumentLoadSuccess}\\n          loading={<Spin size=\\\"large\\\" />}\\n        >\\n          <Page pageNumber={pageNumber} width={595 * zoomPercent / 100} loading={<Spin size=\\\"large\\\" />} />\\n        </Document>\\n      </div>\\n\\n      {numPages > 0 && (\\n        <div className={styles.pageToolbar}>\\n          <Tooltip title={pageNumber == 1 ? '\\u5DF2\\u662F\\u7B2C\\u4E00\\u9875' : '\\u4E0A\\u4E00\\u9875'}>\\n            <LeftOutlined\\n              style={{\\n                fontSize: 16,\\n                color: pageNumber === 1 ? '#d8d8d8' : '#fff',\\n                cursor: pageNumber === 1 ? 'not-allowed' : 'pointer',\\n              }}\\n              onClick={() => onPageStep(-1)}\\n            />\\n          </Tooltip>\\n          <InputNumber\\n            controls={false}\\n            style={{ width: 50, textAlign: 'center' }}\\n            min={1}\\n            max={numPages}\\n            step={1}\\n            value={pageNoInput}\\n            onChange={onPageNoInputChange}\\n            onPressEnter={jumpToPage}\\n          />{' '}\\n          / {numPages}\\n          <Tooltip title={pageNumber == numPages ? '\\u5DF2\\u662F\\u6700\\u540E\\u4E00\\u9875' : '\\u4E0B\\u4E00\\u9875'}>\\n            <RightOutlined\\n              style={{\\n                fontSize: 16,\\n                color: pageNumber === numPages ? '#d8d8d8' : '#fff',\\n                cursor: pageNumber === numPages ? 'not-allowed' : 'pointer',\\n              }}\\n              onClick={() => onPageStep(1)}\\n            />\\n          </Tooltip>\\n          <Tooltip title=\\\"\\u7F29\\u5C0F\\\">\\n            <ZoomOutOutlined style={{ fontSize: 16 }} onClick={onPageZoomOut} />\\n          </Tooltip>\\n          <span className={styles.zoomPercent}>{zoomPercent}%</span>\\n          <Tooltip title=\\\"\\u653E\\u5927\\\">\\n            <ZoomInOutlined style={{ fontSize: 16 }} onClick={onPageZoomIn} />\\n          </Tooltip>\\n        </div>\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default PDFViewer;\\n\")), mdx(\"h3\", null, \"\\u9884\\u89C8docx\\u6587\\u4EF6\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/VolodymyrBaydalka/docxjs\"\n  }, \"docx-preview \\u5B98\\u65B9\\u6587\\u6863\"), \" \")), mdx(\"h4\", null, \"\\u5B89\\u88C5\\u4F9D\\u8D56\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"npm i -S docx-preview\\n\")), mdx(\"h4\", null, \"\\u5F00\\u59CB\\u4F7F\\u7528\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"renderAsync\"), \" \\u65B9\\u6CD5\\u7684\\u7B2C\\u4E00\\u4E2A\\u53C2\\u6570\\u662F \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Blob\"), \" \\u7C7B\\u578B\\uFF1A\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u901A\\u8FC7\\u7528\\u6237\\u64CD\\u4F5C\\u65F6\\u4ECE input \\u9009\\u62E9\\u672C\\u5730\\u6587\\u4EF6\\u83B7\\u53D6\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\u8BFB\\u53D6\\u5728\\u7EBF\\u6587\\u4EF6\\u5730\\u5740\\uFF0C\\u4F7F\\u7528 ajax \\u8BF7\\u6C42\\u6587\\u4EF6\\u6D41\")), mdx(\"h4\", null, \"\\u5B8C\\u6574\\u793A\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useEffect, useRef } from 'react';\\nimport type { FC } from 'react';\\nimport { defaultOptions, renderAsync } from 'docx-preview';\\n\\nconst docxOptions = Object.assign(defaultOptions, {\\n  debug: true,\\n  experimental: true,\\n  useMathMLPolyfill: true,\\n});\\n\\ntype DocxViewerProps = {\\n  file: string | File;\\n}\\n\\nconst DocxViewer: FC<DocxViewerProps> = (props) => {\\n  const viewerDomRef = useRef<HTMLDivElement>(null);\\n\\n  // \\u6839\\u636E\\u6587\\u4EF6\\u5730\\u5740\\u8BF7\\u6C42\\u6587\\u4EF6\\u6D41\\n  const loadFile = async (file: string) => {\\n    const response = await fetch(file, {\\n      method: 'GET'\\n    });\\n    const blobData = await response.blob();\\n    renderAsync(blobData, viewerDomRef.current!, undefined, docxOptions);\\n  };\\n\\n  useEffect(() => {\\n    if (typeof props.file === 'string') {\\n      loadFile(props.file);\\n    } else {\\n      renderAsync(props.file, viewerDomRef.current!, undefined, docxOptions);\\n    }\\n  }, [props.file]);\\n\\n  return <div ref={viewerDomRef}></div>;\\n};\\n\\nexport default DocxViewer;\\n\")), mdx(\"h3\", null, \"\\u9884\\u89C8Excel\\u6587\\u4EF6\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/SheetJS/sheetjs\"\n  }, \"sheetjs \\u5B98\\u65B9\\u6587\\u6863\"))), mdx(\"h4\", null, \"\\u5B89\\u88C5\\u4F9D\\u8D56\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-shell\"\n  }, \"npm i -S xlsx\\n\")), mdx(\"h4\", null, \"\\u5F00\\u59CB\\u4F7F\\u7528\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u4ECExlsx/xls\\u6587\\u4EF6\\u4E2D\\u8BFB\\u53D6\\u6570\\u636E\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uFF01\\uFF01\\u6CE8\\u610F\\uFF1A\\u6587\\u4EF6\\u4E2D\\u7684\\u8D85\\u94FE\\u63A5\\u6837\\u5F0F\\u65E0\\u6CD5\\u8BFB\\u53D6\\uFF0C\\u6587\\u4EF6\\u4E2D\\u7684\\u56FE\\u7247\\u5185\\u5BB9\\u65E0\\u6CD5\\u8BFB\\u53D6\\u3002\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\u5C55\\u793A\\u6570\\u636E\\u8868\\u683C\"))), mdx(\"h4\", null, \"\\u5B8C\\u6574\\u5B9E\\u4F8B\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useState, ChangeEvent } from 'react';\\nimport DataGrid, { TextEditor } from 'react-data-grid';\\nimport { read, utils, WorkSheet } from 'xlsx';\\n\\n// \\u652F\\u6301\\u8BFB\\u53D6xls\\u6587\\u4EF6\\n// @ts-ignore\\nimport * as cptable from 'xlsx/dist/cpexcel.full.mjs';\\nset_cptable(cptable);\\n\\ntype Row = any[]; /*{\\n  [index: string]: string | number;\\n};*/\\n\\ntype Column = {\\n  key: string;\\n  name: string;\\n  editor: typeof TextEditor;\\n};\\n\\ntype DataSet = {\\n  [index: string]: WorkSheet;\\n};\\n\\n// \\u5C06Excel\\u8868\\u683C\\u6570\\u636E\\u8F6C\\u4E3Ajson\\u4E8C\\u7EF4\\u6570\\u7EC4\\nfunction getRowsCols(\\n  data: DataSet,\\n  sheetName: string,\\n): {\\n  rows: Row[];\\n  columns: Column[];\\n} {\\n  const rows: Row[] = utils.sheet_to_json(data[sheetName], {\\n    header: 1,\\n    defval: null,\\n    blankrows: false,\\n    dateNF: 'yyyy-mm-dd',\\n    raw: false,\\n  });\\n  let columns: Column[] = [];\\n\\n  for (let row of rows) {\\n    const keys: string[] = Object.keys(row);\\n\\n    if (keys.length > columns.length) {\\n      columns = keys.map((key) => {\\n        return { key, name: utils.encode_col(+key), editor: TextEditor };\\n      });\\n    }\\n  }\\n\\n  return { rows, columns };\\n}\\n\\nconst ExcelViewer = () => {\\n  const [rows, setRows] = useState<Row[]>([]);\\n  const [columns, setColumns] = useState<Column[]>([]);\\n  const [workBook, setWorkBook] = useState<DataSet>({} as DataSet);\\n  const [sheets, setSheets] = useState<string[]>([]);\\n  const [current, setCurrent] = useState<string>('');\\n\\n  function selectSheet(name: string, reset = true) {\\n    if (reset)\\n      workBook[current] = utils.json_to_sheet(rows, {\\n        header: columns.map((col: Column) => col.key),\\n        skipHeader: true,\\n      });\\n\\n    const { rows: new_rows, columns: new_columns } = getRowsCols(workBook, name);\\n    setRows(new_rows);\\n    setColumns(new_columns);\\n    setCurrent(name);\\n  }\\n\\n  async function handleFile(ev: ChangeEvent<HTMLInputElement>): Promise<void> {\\n    const file = await ev.target.files?.[0]?.arrayBuffer();\\n    const data = read(file);\\n\\n    setWorkBook(data.Sheets);\\n    setSheets(data.SheetNames);\\n  }\\n\\n  return (\\n    <>\\n      <input type=\\\"file\\\" onChange={handleFile} />\\n      <div className=\\\"flex-cont\\\">\\n        {sheets.map((sheet) => (\\n          <button key={sheet} onClick={(e) => selectSheet(sheet)}>\\n            {sheet}\\n          </button>\\n        ))}\\n      </div>\\n      <div className=\\\"flex-cont\\\">\\n        <b>Current Sheet: {current}</b>\\n      </div>\\n      <DataGrid columns={columns} rows={rows} onRowsChange={setRows} />\\n    </>\\n  );\\n};\\n\\nexport default ExcelViewer;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"date":"2022-06-20 20:53:21","title":"前端实现文件预览","slug":"/blog/frontend-file-preview"}}},"pageContext":{"slug":"/blog/frontend-file-preview","next":"/blog/visual-layout-ui","previous":"/blog/hls-m3u8"}},"staticQueryHashes":[]}